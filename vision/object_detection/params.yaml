project: 
  name: object_detection_baseline
  dir: '.'

model: 
  weights_best: 'runs/train/weights/best.pt' # model.pt path(s)

data:
  dataset: coco128
  # test: 'data/coco128.yaml' # *.data path
  train: 'data/coco128.yaml'
  val: 'data/coco128.yaml'

train:
  weights: 'yolov5s.pt' # initial weights path
  cfg: '' # model.yaml path
  data: 'data/coco128.yaml' # data.yaml path
  hyp: 'data/hyps/hyp.scratch-low.yaml' # hyperparameters path
  epochs: 4
  batch_size: 16 # total batch size for all GPUs
  img_size: 32 # [train, test] image sizes
  rect: false # rectangular training
  resume: false # resume most recent training
  nosave: false # only save final checkpoint
  notest: false # only test final epoch
  noautoanchor: false # disable autoanchor check
  evolve: 3 # evolve hyperparameters
  bucket: '' # gsutil bucket
  cache: disk # cache images for faster training
  image_weights: false # use weighted image selection for training
  device: '' # cuda device, i.e. 0 or 0,1,2,3 or cpu
  multi_scale: false # vary img-size +/- 50%%
  single_cls: false # train multi-class data as single-class
  optimizer: Adam # use torch.optim.Adam() optimizer
  sync_bn: false # use SyncBatchNorm, only available in DDP mode
  local_rank: -1 # DDP parameter, do not modify
  workers: 8 # maximum number of dataloader workers
  project: 'runs/train' # save to project/name
  entity: null # W&B entity
  name: 'exp' # save to project/name
  exist_ok: false # existing project/name ok, do not increment
  quad: false # quad dataloader
  cos_lr: false # linear LR
  label_smoothing: 0.0 # Label smoothing epsilon
  upload_dataset: false # Upload dataset as W&B artifact table
  bbox_interval: -1 # Set bounding-box image logging interval for W&B
  save_period: -1 # Log model after every "save_period" epoch
  artifact_alias: latest # version of dataset artifact to be used
  
val:
  weights: 'yolov5s.pt'
  batch_size: 32 # size of each image batch
  img_size: 640 # inference size (pixels)
  conf_thres: 0.001 # object confidence threshold
  iou_thres: 0.6 # IOU threshold for NMS
  max_det: 50 # max detections per image 
  project: '.' # save to project/name
  stage_name: 'runs/val'

# export:
#   weights: runs/train/weights/best.pt # './yolov5s.pt'  # weights path
#   img_size: [640, 640] # image size  # height, width
#   batch_size: 1 # batch size
#   device: 'cpu' # cuda device, i.e. 0 or 0,1,2,3 or cpu
#   include: ['torchscript', 'onnx', 'coreml'] # include formats
#   half: False # FP16 half-precision export
#   inplace: False # set YOLOv5 Detect() inplace=True
#   train: False # model.train() mode
#   optimize: False # optimize TorchScript for mobile  # TorchScript-only
#   dynamic: False # dynamic ONNX axes  # ONNX-only
#   simplify: False # simplify ONNX model  # ONNX-only
#   opset_version: 12 # ONNX opset version  # ONNX-only
#   project: runs/export
